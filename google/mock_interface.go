// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package google is a generated GoMock package.
package google

import (
	http "net/http"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
	calendar "google.golang.org/api/calendar/v3"
)

// MockClientProvider is a mock of ClientProvider interface.
type MockClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockClientProviderMockRecorder
}

// MockClientProviderMockRecorder is the mock recorder for MockClientProvider.
type MockClientProviderMockRecorder struct {
	mock *MockClientProvider
}

// NewMockClientProvider creates a new mock instance.
func NewMockClientProvider(ctrl *gomock.Controller) *MockClientProvider {
	mock := &MockClientProvider{ctrl: ctrl}
	mock.recorder = &MockClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientProvider) EXPECT() *MockClientProviderMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockClientProvider) GetClient(ctx *gofr.Context, state string, scopes []string) (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, state, scopes)
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientProviderMockRecorder) GetClient(ctx, state, scopes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientProvider)(nil).GetClient), ctx, state, scopes)
}

// MockCalendarService is a mock of CalendarService interface.
type MockCalendarService struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarServiceMockRecorder
}

// MockCalendarServiceMockRecorder is the mock recorder for MockCalendarService.
type MockCalendarServiceMockRecorder struct {
	mock *MockCalendarService
}

// NewMockCalendarService creates a new mock instance.
func NewMockCalendarService(ctrl *gomock.Controller) *MockCalendarService {
	mock := &MockCalendarService{ctrl: ctrl}
	mock.recorder = &MockCalendarServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendarService) EXPECT() *MockCalendarServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCalendarService) Create(event *calendar.Event) (*calendar.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", event)
	ret0, _ := ret[0].(*calendar.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCalendarServiceMockRecorder) Create(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCalendarService)(nil).Create), event)
}

// Delete mocks base method.
func (m *MockCalendarService) Delete(eventID, sendUpdates string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", eventID, sendUpdates)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCalendarServiceMockRecorder) Delete(eventID, sendUpdates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCalendarService)(nil).Delete), eventID, sendUpdates)
}

// Get mocks base method.
func (m *MockCalendarService) Get(eventID string) (*calendar.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", eventID)
	ret0, _ := ret[0].(*calendar.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCalendarServiceMockRecorder) Get(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCalendarService)(nil).Get), eventID)
}
